import * as tslib_1 from "tslib";
import { Injectable, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
let Config = class Config {
    get(key, fallback) {
        const c = getConfig();
        if (c) {
            return c.get(key, fallback);
        }
        return null;
    }
    getBoolean(key, fallback) {
        const c = getConfig();
        if (c) {
            return c.getBoolean(key, fallback);
        }
        return false;
    }
    getNumber(key, fallback) {
        const c = getConfig();
        if (c) {
            return c.getNumber(key, fallback);
        }
        return 0;
    }
    set(key, value) {
        console.warn(`[DEPRECATION][Config]: The Config.set() method is deprecated and will be removed in Ionic Framework 6.0. Please see https://ionicframework.com/docs/angular/config for alternatives.`);
        const c = getConfig();
        if (c) {
            c.set(key, value);
        }
    }
};
Config.ɵfac = function Config_Factory(t) { return new (t || Config)(); };
Config.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Config, factory: function (t) { return Config.ɵfac(t); }, providedIn: 'root' });
Config.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function Config_Factory() { return new Config(); }, token: Config, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Config, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
export { Config };
export const ConfigToken = new InjectionToken('USERCONFIG');
const getConfig = () => {
    if (typeof window !== 'undefined') {
        const Ionic = window.Ionic;
        if (Ionic && Ionic.config) {
            return Ionic.config;
        }
    }
    return null;
};
const ɵ0 = getConfig;
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlcyI6WyJuZzovQGlvbmljL2FuZ3VsYXIvcHJvdmlkZXJzL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0Q7O0FBT0EsSUFBYSxNQUFNLEdBQW5CLE1BQWEsTUFBTTtBQUNuQixJQUNFLEdBQUcsQ0FBQyxHQUFzQixFQUFFLFFBQWM7QUFBSSxRQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUMxQixRQUFJLElBQUksQ0FBQyxFQUFFO0FBQ1gsWUFBTSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2xDLFNBQUs7QUFDTCxRQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLElBQUUsQ0FBQztBQUNILElBQ0UsVUFBVSxDQUFDLEdBQXNCLEVBQUUsUUFBa0I7QUFBSSxRQUN2RCxNQUFNLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUMxQixRQUFJLElBQUksQ0FBQyxFQUFFO0FBQ1gsWUFBTSxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3pDLFNBQUs7QUFDTCxRQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUNILElBQ0UsU0FBUyxDQUFDLEdBQXNCLEVBQUUsUUFBaUI7QUFBSSxRQUNyRCxNQUFNLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUMxQixRQUFJLElBQUksQ0FBQyxFQUFFO0FBQ1gsWUFBTSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3hDLFNBQUs7QUFDTCxRQUFJLE9BQU8sQ0FBQyxDQUFDO0FBQ2IsSUFBRSxDQUFDO0FBQ0gsSUFDRSxHQUFHLENBQUMsR0FBc0IsRUFBRSxLQUFXO0FBQ3pDLFFBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxzTEFBc0wsQ0FBQyxDQUFDO0FBQ3pNLFFBQUksTUFBTSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFDMUIsUUFBSSxJQUFJLENBQUMsRUFBRTtBQUNYLFlBQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILENBQUM7O2tJQUFBO0FBQ0Q7QUFsQ2EsTUFBTSw0QkFIbEIsVUFBVSxDQUFDLFVBQ1Y7QUFBVSxFQUFFLE1BQU0sTUFDbkIsQ0FBQyxJQUNXLE1BQU07QUFpQ2xCOzs7MEJBQ0Q7QUFDQSxTQW5DYSxNQUFNO0FBbUNuQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQU0sWUFBWSxDQUFDLENBQUM7QUFFakUsTUFBTSxTQUFTLEdBQUcsR0FBc0IsRUFBRTtBQUMxQyxJQUFFLElBQUksT0FBUSxNQUFjLEtBQUssV0FBVyxFQUFFO0FBQzlDLFFBQUksTUFBTSxLQUFLLEdBQUksTUFBNkIsQ0FBQyxLQUFLLENBQUM7QUFDdkQsUUFBSSxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQy9CLFlBQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzFCLFNBQUs7QUFDTCxLQUFHO0FBQ0gsSUFBRSxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUNGO0FBQXNCO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlnIGFzIENvcmVDb25maWcsIElvbmljQ29uZmlnIH0gZnJvbSAnQGlvbmljL2NvcmUnO1xuXG5pbXBvcnQgeyBJb25pY1dpbmRvdyB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb25maWcge1xuXG4gIGdldChrZXk6IGtleW9mIElvbmljQ29uZmlnLCBmYWxsYmFjaz86IGFueSk6IGFueSB7XG4gICAgY29uc3QgYyA9IGdldENvbmZpZygpO1xuICAgIGlmIChjKSB7XG4gICAgICByZXR1cm4gYy5nZXQoa2V5LCBmYWxsYmFjayk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0Qm9vbGVhbihrZXk6IGtleW9mIElvbmljQ29uZmlnLCBmYWxsYmFjaz86IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICBjb25zdCBjID0gZ2V0Q29uZmlnKCk7XG4gICAgaWYgKGMpIHtcbiAgICAgIHJldHVybiBjLmdldEJvb2xlYW4oa2V5LCBmYWxsYmFjayk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGdldE51bWJlcihrZXk6IGtleW9mIElvbmljQ29uZmlnLCBmYWxsYmFjaz86IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgYyA9IGdldENvbmZpZygpO1xuICAgIGlmIChjKSB7XG4gICAgICByZXR1cm4gYy5nZXROdW1iZXIoa2V5LCBmYWxsYmFjayk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgc2V0KGtleToga2V5b2YgSW9uaWNDb25maWcsIHZhbHVlPzogYW55KSB7XG4gICAgY29uc29sZS53YXJuKGBbREVQUkVDQVRJT05dW0NvbmZpZ106IFRoZSBDb25maWcuc2V0KCkgbWV0aG9kIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBJb25pYyBGcmFtZXdvcmsgNi4wLiBQbGVhc2Ugc2VlIGh0dHBzOi8vaW9uaWNmcmFtZXdvcmsuY29tL2RvY3MvYW5ndWxhci9jb25maWcgZm9yIGFsdGVybmF0aXZlcy5gKTtcbiAgICBjb25zdCBjID0gZ2V0Q29uZmlnKCk7XG4gICAgaWYgKGMpIHtcbiAgICAgIGMuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQ29uZmlnVG9rZW4gPSBuZXcgSW5qZWN0aW9uVG9rZW48YW55PignVVNFUkNPTkZJRycpO1xuXG5jb25zdCBnZXRDb25maWcgPSAoKTogQ29yZUNvbmZpZyB8IG51bGwgPT4ge1xuICBpZiAodHlwZW9mICh3aW5kb3cgYXMgYW55KSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zdCBJb25pYyA9ICh3aW5kb3cgYXMgYW55IGFzIElvbmljV2luZG93KS5Jb25pYztcbiAgICBpZiAoSW9uaWMgJiYgSW9uaWMuY29uZmlnKSB7XG4gICAgICByZXR1cm4gSW9uaWMuY29uZmlnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iXX0=