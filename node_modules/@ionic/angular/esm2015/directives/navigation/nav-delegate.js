import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, ElementRef, Injector, ViewContainerRef } from '@angular/core';
import { AngularDelegate } from '../../providers/angular-delegate';
import { ProxyCmp, proxyOutputs } from '../proxies-utils';
import * as ɵngcc0 from '@angular/core';
let NavDelegate = class NavDelegate {
    constructor(ref, resolver, injector, angularDelegate, location) {
        this.el = ref.nativeElement;
        ref.nativeElement.delegate = angularDelegate.create(resolver, injector, location);
        proxyOutputs(this, this.el, ['ionNavDidChange', 'ionNavWillChange']);
    }
};
NavDelegate.ɵfac = function NavDelegate_Factory(t) { return new (t || NavDelegate)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(AngularDelegate), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
NavDelegate.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NavDelegate, selectors: [["ion-nav"]] });
NavDelegate.ctorParameters = () => [
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: AngularDelegate },
    { type: ViewContainerRef }
];
NavDelegate = tslib_1.__decorate([
    ProxyCmp({
        inputs: ['animated', 'animation', 'root', 'rootParams', 'swipeGesture'],
        methods: ['push', 'insert', 'insertPages', 'pop', 'popTo', 'popToRoot', 'removeIndex', 'setRoot', 'setPages', 'getActive', 'getByIndex', 'canGoBack', 'getPrevious']
    }),
], NavDelegate);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NavDelegate, [{
        type: Directive,
        args: [{
                selector: 'ion-nav'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }, { type: AngularDelegate }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
export { NavDelegate };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LWRlbGVnYXRlLmpzIiwic291cmNlcyI6WyJuZzovQGlvbmljL2FuZ3VsYXIvZGlyZWN0aXZlcy9uYXZpZ2F0aW9uL25hdi1kZWxlZ2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQVMxRCxJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0FBQ3hCLElBQ0UsWUFDRSxHQUFlLEVBQ2YsUUFBa0MsRUFDbEMsUUFBa0IsRUFDbEIsZUFBZ0MsRUFDaEMsUUFBMEI7QUFDM0IsUUFDQyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7QUFDaEMsUUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDdEYsUUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRyxrQkFBa0IsQ0FBRSxDQUFDLENBQUM7QUFDM0UsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7NkZBQUE7QUFDRDtBQUFxQyxZQVg1QixVQUFVO0FBQ2pCLFlBQVksd0JBQXdCO0FBQ3BDLFlBQVksUUFBUTtBQUNwQixZQUFtQixlQUFlO0FBQ2xDLFlBQVksZ0JBQWdCO0FBQzVCO0FBUlcsV0FBVztBQUNILElBUnBCLFFBQVEsQ0FBQztBQUNWLFFBQUUsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLGNBQWMsQ0FBQztBQUN6RSxRQUFFLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGFBQWEsQ0FBQztBQUN0SyxLQUFDLENBQUMsQ0FHQTtJQUZELFNBQVMsQ0FBQyxkQUdYLEdBQWEsV0FBVyxDQWF2QjtPQWZDLFFBQVEsRUFBRSxTQUFTLE1BQ3BCOzs7OzsrTUFlRDtBQUFDLFNBZFksV0FBVztBQUN2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBbmd1bGFyRGVsZWdhdGUgfSBmcm9tICcuLi8uLi9wcm92aWRlcnMvYW5ndWxhci1kZWxlZ2F0ZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgcHJveHlPdXRwdXRzIH0gZnJvbSAnLi4vcHJveGllcy11dGlscyc7XG5cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydhbmltYXRlZCcsICdhbmltYXRpb24nLCAncm9vdCcsICdyb290UGFyYW1zJywgJ3N3aXBlR2VzdHVyZSddLFxuICBtZXRob2RzOiBbJ3B1c2gnLCAnaW5zZXJ0JywgJ2luc2VydFBhZ2VzJywgJ3BvcCcsICdwb3BUbycsICdwb3BUb1Jvb3QnLCAncmVtb3ZlSW5kZXgnLCAnc2V0Um9vdCcsICdzZXRQYWdlcycsICdnZXRBY3RpdmUnLCAnZ2V0QnlJbmRleCcsICdjYW5Hb0JhY2snLCAnZ2V0UHJldmlvdXMnXVxufSlcbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2lvbi1uYXYnXG59KVxuZXhwb3J0IGNsYXNzIE5hdkRlbGVnYXRlIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoXG4gICAgcmVmOiBFbGVtZW50UmVmLFxuICAgIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIGFuZ3VsYXJEZWxlZ2F0ZTogQW5ndWxhckRlbGVnYXRlLFxuICAgIGxvY2F0aW9uOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge1xuICAgIHRoaXMuZWwgPSByZWYubmF0aXZlRWxlbWVudDtcbiAgICByZWYubmF0aXZlRWxlbWVudC5kZWxlZ2F0ZSA9IGFuZ3VsYXJEZWxlZ2F0ZS5jcmVhdGUocmVzb2x2ZXIsIGluamVjdG9yLCBsb2NhdGlvbik7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsnaW9uTmF2RGlkQ2hhbmdlJyAsICdpb25OYXZXaWxsQ2hhbmdlJyBdKTtcbiAgfVxufVxuIl19