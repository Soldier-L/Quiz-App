import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, Injector } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ValueAccessor } from './value-accessor';
import * as ɵngcc0 from '@angular/core';
var SelectValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(SelectValueAccessor, _super);
    function SelectValueAccessor(injector, el) {
        return _super.call(this, injector, el) || this;
    }
    SelectValueAccessor_1 = SelectValueAccessor;
    SelectValueAccessor.prototype._handleChangeEvent = function (el) {
        this.handleChangeEvent(el, el.value);
    };
    var SelectValueAccessor_1;
    SelectValueAccessor.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        HostListener('ionChange', ['$event.target'])
    ], SelectValueAccessor.prototype, "_handleChangeEvent", null);
SelectValueAccessor.ɵfac = function SelectValueAccessor_Factory(t) { return new (t || SelectValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
SelectValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SelectValueAccessor, selectors: [["ion-range"], ["ion-select"], ["ion-radio-group"], ["ion-segment"], ["ion-datetime"]], hostBindings: function SelectValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("ionChange", function SelectValueAccessor_ionChange_HostBindingHandler($event) { return ctx._handleChangeEvent($event.target); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: SelectValueAccessor_1,
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SelectValueAccessor, [{
        type: Directive,
        args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'ion-range, ion-select, ion-radio-group, ion-segment, ion-datetime',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: SelectValueAccessor_1,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.ElementRef }]; }, { _handleChangeEvent: [{
            type: HostListener,
            args: ['ionChange', ['$event.target']]
        }] }); })();
    return SelectValueAccessor;
}(ValueAccessor));
export { SelectValueAccessor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LXZhbHVlLWFjY2Vzc29yLmpzIiwic291cmNlcyI6WyJuZzovQGlvbmljL2FuZ3VsYXIvZGlyZWN0aXZlcy9jb250cm9sLXZhbHVlLWFjY2Vzc29ycy9zZWxlY3QtdmFsdWUtYWNjZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQWFqRDtBQUVHLElBRnNDLCtDQUFhO0FBQUMsSUFFckQsNkJBQVksUUFBa0IsRUFBRSxFQUFjO0FBQ2hELGVBQUksa0JBQU0sUUFBUSxFQUFFLEVBQUUsQ0FBQztBQUdwQixJQUZELENBQUM7QUFDSCw0QkFMYSxtQkFBbUI7QUFBRSxJQU9oQyxnREFBa0IsR0FBbEIsVUFBbUIsRUFBTztBQUM1QixRQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLElBQUUsQ0FBQztBQUNGO0FBQzZCO0FBQWdFLGdCQVR0RSxRQUFRO0FBQUksZ0JBQUUsVUFBVTtBQUFHO0FBQzFDLElBSVA7QUFBcUIsUUFEcEIsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQy9DLGlFQUVHO0lBVFUsbUJBQW1CLHdEQVgvQixTQUFTLENBQUMsY0FDVCxpREFBaUQsYUFDakQsUUFBUSxFQUFFOzJDQUFtRSxjQUM3RSxTQUFTLEVBQUUsa0JBQ1Qsc0JBQ0UsT0FBTyxFQUFFLGlCQUFpQixzQkFDMUIsV0FBVyxFQUFFLHFCQUFtQixzQkFDaEMsS0FBSyxFQUFFLElBQUksa0JBQ1osY0FDRjtHQUNGLENBQUMsUUFDVyxtQkFBbUIsQ0FVL0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQsMEJBQUM7QUFDQSxDQURBLEFBVkQsQ0FBeUMsYUFBYSxHQVVyRDtBQUNELFNBWGEsbUJBQW1CO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnLi92YWx1ZS1hY2Nlc3Nvcic7XG5cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG4gIHNlbGVjdG9yOiAnaW9uLXJhbmdlLCBpb24tc2VsZWN0LCBpb24tcmFkaW8tZ3JvdXAsIGlvbi1zZWdtZW50LCBpb24tZGF0ZXRpbWUnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBTZWxlY3RWYWx1ZUFjY2Vzc29yLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgU2VsZWN0VmFsdWVBY2Nlc3NvciBleHRlbmRzIFZhbHVlQWNjZXNzb3Ige1xuXG4gIGNvbnN0cnVjdG9yKGluamVjdG9yOiBJbmplY3RvciwgZWw6IEVsZW1lbnRSZWYpIHtcbiAgICBzdXBlcihpbmplY3RvciwgZWwpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignaW9uQ2hhbmdlJywgWyckZXZlbnQudGFyZ2V0J10pXG4gIF9oYW5kbGVDaGFuZ2VFdmVudChlbDogYW55KSB7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VFdmVudChlbCwgZWwudmFsdWUpO1xuICB9XG59XG4iXX0=