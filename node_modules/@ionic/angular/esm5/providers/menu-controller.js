import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { menuController } from '@ionic/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var MenuController = /** @class */ (function () {
    function MenuController() {
    }
    /**
     * Programmatically open the Menu.
     * @param [menuId]  Optionally get the menu by its id, or side.
     * @return returns a promise when the menu is fully opened
     */
    MenuController.prototype.open = function (menuId) {
        return menuController.open(menuId);
    };
    /**
     * Programmatically close the Menu. If no `menuId` is given as the first
     * argument then it'll close any menu which is open. If a `menuId`
     * is given then it'll close that exact menu.
     * @param [menuId]  Optionally get the menu by its id, or side.
     * @return returns a promise when the menu is fully closed
     */
    MenuController.prototype.close = function (menuId) {
        return menuController.close(menuId);
    };
    /**
     * Toggle the menu. If it's closed, it will open, and if opened, it
     * will close.
     * @param [menuId]  Optionally get the menu by its id, or side.
     * @return returns a promise when the menu has been toggled
     */
    MenuController.prototype.toggle = function (menuId) {
        return menuController.toggle(menuId);
    };
    /**
     * Used to enable or disable a menu. For example, there could be multiple
     * left menus, but only one of them should be able to be opened at the same
     * time. If there are multiple menus on the same side, then enabling one menu
     * will also automatically disable all the others that are on the same side.
     * @param [menuId]  Optionally get the menu by its id, or side.
     * @return Returns the instance of the menu, which is useful for chaining.
     */
    MenuController.prototype.enable = function (shouldEnable, menuId) {
        return menuController.enable(shouldEnable, menuId);
    };
    /**
     * Used to enable or disable the ability to swipe open the menu.
     * @param shouldEnable  True if it should be swipe-able, false if not.
     * @param [menuId]  Optionally get the menu by its id, or side.
     * @return Returns the instance of the menu, which is useful for chaining.
     */
    MenuController.prototype.swipeGesture = function (shouldEnable, menuId) {
        return menuController.swipeGesture(shouldEnable, menuId);
    };
    /**
     * @param [menuId] Optionally get the menu by its id, or side.
     * @return Returns true if the specified menu is currently open, otherwise false.
     * If the menuId is not specified, it returns true if ANY menu is currenly open.
     */
    MenuController.prototype.isOpen = function (menuId) {
        return menuController.isOpen(menuId);
    };
    /**
     * @param [menuId]  Optionally get the menu by its id, or side.
     * @return Returns true if the menu is currently enabled, otherwise false.
     */
    MenuController.prototype.isEnabled = function (menuId) {
        return menuController.isEnabled(menuId);
    };
    /**
     * Used to get a menu instance. If a `menuId` is not provided then it'll
     * return the first menu found. If a `menuId` is `left` or `right`, then
     * it'll return the enabled menu on that side. Otherwise, if a `menuId` is
     * provided, then it'll try to find the menu using the menu's `id`
     * property. If a menu is not found then it'll return `null`.
     * @param [menuId]  Optionally get the menu by its id, or side.
     * @return Returns the instance of the menu if found, otherwise `null`.
     */
    MenuController.prototype.get = function (menuId) {
        return menuController.get(menuId);
    };
    /**
     * @return Returns the instance of the menu already opened, otherwise `null`.
     */
    MenuController.prototype.getOpen = function () {
        return menuController.getOpen();
    };
    /**
     * @return Returns an array of all menu instances.
     */
    MenuController.prototype.getMenus = function () {
        return menuController.getMenus();
    };
    MenuController.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MenuController_Factory() { return new MenuController(); }, token: MenuController, providedIn: "root" });
MenuController.ɵfac = function MenuController_Factory(t) { return new (t || MenuController)(); };
MenuController.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MenuController, factory: function (t) { return MenuController.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MenuController, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return MenuController;
}());
export { MenuController };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1jb250cm9sbGVyLmpzIiwic291cmNlcyI6WyJuZzovQGlvbmljL2FuZ3VsYXIvcHJvdmlkZXJzL21lbnUtY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdDOztBQUlBO0FBR2EsSUFIYjtBQUE0QixLQWlHM0I7QUFDRCxJQWhHRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFFLDZCQUFJLEdBQUosVUFBSyxNQUFlO0FBQ3RCLFFBQUksT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FEQztBQUNMLElBQUUsOEJBQUssR0FBTCxVQUFNLE1BQWU7QUFDdkIsUUFBSSxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsSUFBRSxDQUFDO0FBRUgsSUFBRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FERztBQUNMLElBQUUsK0JBQU0sR0FBTixVQUFPLE1BQWU7QUFDeEIsUUFBSSxPQUFPLGNBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekMsSUFBRSxDQUFDO0FBRUgsSUFBRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREQ7QUFDTCxJQUFFLCtCQUFNLEdBQU4sVUFBTyxZQUFxQixFQUFFLE1BQWU7QUFDL0MsUUFBSSxPQUFPLGNBQWMsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREc7QUFDTCxJQUFFLHFDQUFZLEdBQVosVUFBYSxZQUFxQixFQUFFLE1BQWU7QUFDckQsUUFBSSxPQUFPLGNBQWMsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzdELElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFO0FBQ0U7QUFFSixPQURLO0FBQ0wsSUFBRSwrQkFBTSxHQUFOLFVBQU8sTUFBZTtBQUN4QixRQUFJLE9BQU8sY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN6QyxJQUFFLENBQUM7QUFFSCxJQUFFO0FBQ0Y7QUFDRTtBQUNFLE9BQUM7QUFDTCxJQUFFLGtDQUFTLEdBQVQsVUFBVSxNQUFlO0FBQzNCLFFBQUksT0FBTyxjQUFjLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUNFO0FBQ0U7QUFDRTtBQUVKLE9BREg7QUFDTCxJQUFFLDRCQUFHLEdBQUgsVUFBSSxNQUFlO0FBQ3JCLFFBQUksT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLGdDQUFPLEdBQVA7QUFDQSxRQUFFLE9BQU8sY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3BDLElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLGlDQUFRLEdBQVI7QUFDRCxRQUFHLE9BQU8sY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3JDLElBQUUsQ0FBQztBQUNGO0lBakdZLGNBQWMsZ0NBSDFCLFVBQVUsQ0FBQyxjQUNWLFVBQVUsRUFBRSxNQUFNO01BQ25CLENBQUMsUUFDVyxjQUFjLENBaUcxQjs7Ozs7O2dEQUNEO0FBQUMseUJBeEdEO0FBQUUsQ0F1R0QsQUFqR0QsSUFpR0M7QUFDRCxTQWxHYSxjQUFjO0FBRTNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWVudUNvbnRyb2xsZXIgfSBmcm9tICdAaW9uaWMvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBNZW51Q29udHJvbGxlciB7XG5cbiAgLyoqXG4gICAqIFByb2dyYW1tYXRpY2FsbHkgb3BlbiB0aGUgTWVudS5cbiAgICogQHBhcmFtIFttZW51SWRdICBPcHRpb25hbGx5IGdldCB0aGUgbWVudSBieSBpdHMgaWQsIG9yIHNpZGUuXG4gICAqIEByZXR1cm4gcmV0dXJucyBhIHByb21pc2Ugd2hlbiB0aGUgbWVudSBpcyBmdWxseSBvcGVuZWRcbiAgICovXG4gIG9wZW4obWVudUlkPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG1lbnVDb250cm9sbGVyLm9wZW4obWVudUlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9ncmFtbWF0aWNhbGx5IGNsb3NlIHRoZSBNZW51LiBJZiBubyBgbWVudUlkYCBpcyBnaXZlbiBhcyB0aGUgZmlyc3RcbiAgICogYXJndW1lbnQgdGhlbiBpdCdsbCBjbG9zZSBhbnkgbWVudSB3aGljaCBpcyBvcGVuLiBJZiBhIGBtZW51SWRgXG4gICAqIGlzIGdpdmVuIHRoZW4gaXQnbGwgY2xvc2UgdGhhdCBleGFjdCBtZW51LlxuICAgKiBAcGFyYW0gW21lbnVJZF0gIE9wdGlvbmFsbHkgZ2V0IHRoZSBtZW51IGJ5IGl0cyBpZCwgb3Igc2lkZS5cbiAgICogQHJldHVybiByZXR1cm5zIGEgcHJvbWlzZSB3aGVuIHRoZSBtZW51IGlzIGZ1bGx5IGNsb3NlZFxuICAgKi9cbiAgY2xvc2UobWVudUlkPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG1lbnVDb250cm9sbGVyLmNsb3NlKG1lbnVJZCk7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBtZW51LiBJZiBpdCdzIGNsb3NlZCwgaXQgd2lsbCBvcGVuLCBhbmQgaWYgb3BlbmVkLCBpdFxuICAgKiB3aWxsIGNsb3NlLlxuICAgKiBAcGFyYW0gW21lbnVJZF0gIE9wdGlvbmFsbHkgZ2V0IHRoZSBtZW51IGJ5IGl0cyBpZCwgb3Igc2lkZS5cbiAgICogQHJldHVybiByZXR1cm5zIGEgcHJvbWlzZSB3aGVuIHRoZSBtZW51IGhhcyBiZWVuIHRvZ2dsZWRcbiAgICovXG4gIHRvZ2dsZShtZW51SWQ/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbWVudUNvbnRyb2xsZXIudG9nZ2xlKG1lbnVJZCk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBlbmFibGUgb3IgZGlzYWJsZSBhIG1lbnUuIEZvciBleGFtcGxlLCB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZVxuICAgKiBsZWZ0IG1lbnVzLCBidXQgb25seSBvbmUgb2YgdGhlbSBzaG91bGQgYmUgYWJsZSB0byBiZSBvcGVuZWQgYXQgdGhlIHNhbWVcbiAgICogdGltZS4gSWYgdGhlcmUgYXJlIG11bHRpcGxlIG1lbnVzIG9uIHRoZSBzYW1lIHNpZGUsIHRoZW4gZW5hYmxpbmcgb25lIG1lbnVcbiAgICogd2lsbCBhbHNvIGF1dG9tYXRpY2FsbHkgZGlzYWJsZSBhbGwgdGhlIG90aGVycyB0aGF0IGFyZSBvbiB0aGUgc2FtZSBzaWRlLlxuICAgKiBAcGFyYW0gW21lbnVJZF0gIE9wdGlvbmFsbHkgZ2V0IHRoZSBtZW51IGJ5IGl0cyBpZCwgb3Igc2lkZS5cbiAgICogQHJldHVybiBSZXR1cm5zIHRoZSBpbnN0YW5jZSBvZiB0aGUgbWVudSwgd2hpY2ggaXMgdXNlZnVsIGZvciBjaGFpbmluZy5cbiAgICovXG4gIGVuYWJsZShzaG91bGRFbmFibGU6IGJvb2xlYW4sIG1lbnVJZD86IHN0cmluZykge1xuICAgIHJldHVybiBtZW51Q29udHJvbGxlci5lbmFibGUoc2hvdWxkRW5hYmxlLCBtZW51SWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGFiaWxpdHkgdG8gc3dpcGUgb3BlbiB0aGUgbWVudS5cbiAgICogQHBhcmFtIHNob3VsZEVuYWJsZSAgVHJ1ZSBpZiBpdCBzaG91bGQgYmUgc3dpcGUtYWJsZSwgZmFsc2UgaWYgbm90LlxuICAgKiBAcGFyYW0gW21lbnVJZF0gIE9wdGlvbmFsbHkgZ2V0IHRoZSBtZW51IGJ5IGl0cyBpZCwgb3Igc2lkZS5cbiAgICogQHJldHVybiBSZXR1cm5zIHRoZSBpbnN0YW5jZSBvZiB0aGUgbWVudSwgd2hpY2ggaXMgdXNlZnVsIGZvciBjaGFpbmluZy5cbiAgICovXG4gIHN3aXBlR2VzdHVyZShzaG91bGRFbmFibGU6IGJvb2xlYW4sIG1lbnVJZD86IHN0cmluZykge1xuICAgIHJldHVybiBtZW51Q29udHJvbGxlci5zd2lwZUdlc3R1cmUoc2hvdWxkRW5hYmxlLCBtZW51SWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBbbWVudUlkXSBPcHRpb25hbGx5IGdldCB0aGUgbWVudSBieSBpdHMgaWQsIG9yIHNpZGUuXG4gICAqIEByZXR1cm4gUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgbWVudSBpcyBjdXJyZW50bHkgb3Blbiwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgKiBJZiB0aGUgbWVudUlkIGlzIG5vdCBzcGVjaWZpZWQsIGl0IHJldHVybnMgdHJ1ZSBpZiBBTlkgbWVudSBpcyBjdXJyZW5seSBvcGVuLlxuICAgKi9cbiAgaXNPcGVuKG1lbnVJZD86IHN0cmluZykge1xuICAgIHJldHVybiBtZW51Q29udHJvbGxlci5pc09wZW4obWVudUlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gW21lbnVJZF0gIE9wdGlvbmFsbHkgZ2V0IHRoZSBtZW51IGJ5IGl0cyBpZCwgb3Igc2lkZS5cbiAgICogQHJldHVybiBSZXR1cm5zIHRydWUgaWYgdGhlIG1lbnUgaXMgY3VycmVudGx5IGVuYWJsZWQsIG90aGVyd2lzZSBmYWxzZS5cbiAgICovXG4gIGlzRW5hYmxlZChtZW51SWQ/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbWVudUNvbnRyb2xsZXIuaXNFbmFibGVkKG1lbnVJZCk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBnZXQgYSBtZW51IGluc3RhbmNlLiBJZiBhIGBtZW51SWRgIGlzIG5vdCBwcm92aWRlZCB0aGVuIGl0J2xsXG4gICAqIHJldHVybiB0aGUgZmlyc3QgbWVudSBmb3VuZC4gSWYgYSBgbWVudUlkYCBpcyBgbGVmdGAgb3IgYHJpZ2h0YCwgdGhlblxuICAgKiBpdCdsbCByZXR1cm4gdGhlIGVuYWJsZWQgbWVudSBvbiB0aGF0IHNpZGUuIE90aGVyd2lzZSwgaWYgYSBgbWVudUlkYCBpc1xuICAgKiBwcm92aWRlZCwgdGhlbiBpdCdsbCB0cnkgdG8gZmluZCB0aGUgbWVudSB1c2luZyB0aGUgbWVudSdzIGBpZGBcbiAgICogcHJvcGVydHkuIElmIGEgbWVudSBpcyBub3QgZm91bmQgdGhlbiBpdCdsbCByZXR1cm4gYG51bGxgLlxuICAgKiBAcGFyYW0gW21lbnVJZF0gIE9wdGlvbmFsbHkgZ2V0IHRoZSBtZW51IGJ5IGl0cyBpZCwgb3Igc2lkZS5cbiAgICogQHJldHVybiBSZXR1cm5zIHRoZSBpbnN0YW5jZSBvZiB0aGUgbWVudSBpZiBmb3VuZCwgb3RoZXJ3aXNlIGBudWxsYC5cbiAgICovXG4gIGdldChtZW51SWQ/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbWVudUNvbnRyb2xsZXIuZ2V0KG1lbnVJZCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBSZXR1cm5zIHRoZSBpbnN0YW5jZSBvZiB0aGUgbWVudSBhbHJlYWR5IG9wZW5lZCwgb3RoZXJ3aXNlIGBudWxsYC5cbiAgICovXG4gIGdldE9wZW4oKSB7XG4gICAgcmV0dXJuIG1lbnVDb250cm9sbGVyLmdldE9wZW4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIFJldHVybnMgYW4gYXJyYXkgb2YgYWxsIG1lbnUgaW5zdGFuY2VzLlxuICAgKi9cbiAgZ2V0TWVudXMoKSB7XG4gICAgcmV0dXJuIG1lbnVDb250cm9sbGVyLmdldE1lbnVzKCk7XG4gIH1cbn1cbiJdfQ==