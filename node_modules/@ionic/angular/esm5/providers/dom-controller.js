import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var DomController = /** @class */ (function () {
    function DomController() {
    }
    /**
     * Schedules a task to run during the READ phase of the next frame.
     * This task should only read the DOM, but never modify it.
     */
    DomController.prototype.read = function (cb) {
        getQueue().read(cb);
    };
    /**
     * Schedules a task to run during the WRITE phase of the next frame.
     * This task should write the DOM, but never READ it.
     */
    DomController.prototype.write = function (cb) {
        getQueue().write(cb);
    };
    DomController.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DomController_Factory() { return new DomController(); }, token: DomController, providedIn: "root" });
DomController.ɵfac = function DomController_Factory(t) { return new (t || DomController)(); };
DomController.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DomController, factory: function (t) { return DomController.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DomController, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return DomController;
}());
export { DomController };
var getQueue = function () {
    var win = typeof window !== 'undefined' ? window : null;
    if (win != null) {
        var Ionic = win.Ionic;
        if (Ionic && Ionic.queue) {
            return Ionic.queue;
        }
        return {
            read: function (cb) { return win.requestAnimationFrame(cb); },
            write: function (cb) { return win.requestAnimationFrame(cb); }
        };
    }
    return {
        read: function (cb) { return cb(); },
        write: function (cb) { return cb(); }
    };
};
var ɵ0 = getQueue;
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLWNvbnRyb2xsZXIuanMiLCJzb3VyY2VzIjpbIm5nOi9AaW9uaWMvYW5ndWxhci9wcm92aWRlcnMvZG9tLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7O0FBSUE7QUFHYSxJQUhiO0FBQTJCLEtBaUIxQjtBQUNELElBaEJFO0FBQ0Y7QUFDRTtBQUNFLE9BQUM7QUFDTCxJQUFFLDRCQUFJLEdBQUosVUFBSyxFQUFlO0FBQ3RCLFFBQUksUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFO0FBQ0UsT0FBQztBQUNMLElBQUUsNkJBQUssR0FBTCxVQUFNLEVBQWU7QUFDdkIsUUFBSSxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekIsSUFBRSxDQUFDO0FBQ0Y7SUFqQlksYUFBYSxnQ0FIekIsVUFBVSxDQUFDLGNBQ1YsVUFBVSxFQUFFLE1BQU07UUFDbkIsQ0FBQyxRQUNXLGFBQWEsQ0FpQnpCOzs7Ozs7Z0RBQ0Q7QUFDQSx3QkF4QkE7QUFBRSxDQXNCRCxBQWpCRCxJQWlCQztBQUNELFNBbEJhLGFBQWE7QUFtQjFCLElBQU0sUUFBUSxHQUFHO0FBQ1gsSUFBSixJQUFNLEdBQUcsR0FBRyxPQUFRLE1BQWMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBVyxDQUFDO0FBQzVFLElBQ0UsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO0FBQ25CLFFBQUksSUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztBQUM1QixRQUFJLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7QUFDOUIsWUFBTSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDekIsU0FBSztBQUNMLFFBQ0ksT0FBTztBQUNYLFlBQU0sSUFBSSxFQUFFLFVBQUMsRUFBTyxJQUFLLE9BQUEsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxFQUE3QixDQUE2QjtBQUN0RCxZQUFNLEtBQUssRUFBRSxVQUFDLEVBQU8sSUFBSyxPQUFBLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsRUFBN0IsQ0FBNkI7QUFDdkQsU0FBSyxDQUFDO0FBQ04sS0FBRztBQUNILElBQ0UsT0FBTztBQUNULFFBQUksSUFBSSxFQUFFLFVBQUMsRUFBTyxJQUFLLE9BQUEsRUFBRSxFQUFFLEVBQUosQ0FBSTtBQUMzQixRQUFJLEtBQUssRUFBRSxVQUFDLEVBQU8sSUFBSyxPQUFBLEVBQUUsRUFBRSxFQUFKLENBQUk7QUFDNUIsS0FBRyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBQ0Y7QUFDa0I7QUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIERvbUNvbnRyb2xsZXIge1xuXG4gIC8qKlxuICAgKiBTY2hlZHVsZXMgYSB0YXNrIHRvIHJ1biBkdXJpbmcgdGhlIFJFQUQgcGhhc2Ugb2YgdGhlIG5leHQgZnJhbWUuXG4gICAqIFRoaXMgdGFzayBzaG91bGQgb25seSByZWFkIHRoZSBET00sIGJ1dCBuZXZlciBtb2RpZnkgaXQuXG4gICAqL1xuICByZWFkKGNiOiBSYWZDYWxsYmFjaykge1xuICAgIGdldFF1ZXVlKCkucmVhZChjYik7XG4gIH1cblxuICAvKipcbiAgICogU2NoZWR1bGVzIGEgdGFzayB0byBydW4gZHVyaW5nIHRoZSBXUklURSBwaGFzZSBvZiB0aGUgbmV4dCBmcmFtZS5cbiAgICogVGhpcyB0YXNrIHNob3VsZCB3cml0ZSB0aGUgRE9NLCBidXQgbmV2ZXIgUkVBRCBpdC5cbiAgICovXG4gIHdyaXRlKGNiOiBSYWZDYWxsYmFjaykge1xuICAgIGdldFF1ZXVlKCkud3JpdGUoY2IpO1xuICB9XG59XG5cbmNvbnN0IGdldFF1ZXVlID0gKCkgPT4ge1xuICBjb25zdCB3aW4gPSB0eXBlb2YgKHdpbmRvdyBhcyBhbnkpICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IG51bGwgYXMgYW55O1xuXG4gIGlmICh3aW4gIT0gbnVsbCkge1xuICAgIGNvbnN0IElvbmljID0gd2luLklvbmljO1xuICAgIGlmIChJb25pYyAmJiBJb25pYy5xdWV1ZSkge1xuICAgICAgcmV0dXJuIElvbmljLnF1ZXVlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICByZWFkOiAoY2I6IGFueSkgPT4gd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZShjYiksXG4gICAgICB3cml0ZTogKGNiOiBhbnkpID0+IHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVhZDogKGNiOiBhbnkpID0+IGNiKCksXG4gICAgd3JpdGU6IChjYjogYW55KSA9PiBjYigpXG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBSYWZDYWxsYmFjayA9ICh0aW1lU3RhbXA/OiBudW1iZXIpID0+IHZvaWQ7XG4iXX0=